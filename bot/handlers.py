from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.database import get_session
from bot.models import User, Card, UserCard
from bot.keyboards import main_menu, cards_menu, card_details
from datetime import datetime, timedelta
from random import choice

router = Router()

class CardStates(StatesGroup):
    SELECT_RARITY = State()
    SELECT_CARD = State()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤
RANK_SYSTEM = {
    0: {"title": "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", "emoji": "üëÄ", "description": "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è"},
    1: {"title": "–ù–æ–≤–∏—á–æ–∫", "emoji": "üê£", "description": "–°–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏"},
    11: {"title": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", "emoji": "üì¶", "description": "–ù–∞—á–∞–ª —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"},
    26: {"title": "–ó–Ω–∞—Ç–æ–∫", "emoji": "üß†", "description": "–£–∑–Ω–∞—ë—Ç –∫–∞—Ä—Ç—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"},
    41: {"title": "–ò—Å–∫–∞—Ç–µ–ª—å —Ä–µ–¥–∫–æ—Å—Ç–µ–π", "emoji": "üîç", "description": "–¶–µ–Ω–∏—Ç –∫–∞–∂–¥—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É"},
    61: {"title": "–ú–∞—Å—Ç–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π", "emoji": "üßô", "description": "–ü–æ—á—Ç–∏ –≤—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞"},
    80: {"title": "–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å", "emoji": "üìö", "description": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π"},
    95: {"title": "–õ–µ–≥–µ–Ω–¥–∞", "emoji": "üåü", "description": "–û—Å—Ç–∞–ª–∏—Å—å —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"},
    100: {"title": "–ì—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–π", "emoji": "üèÜ", "description": "–°–æ–±—Ä–∞–ª –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ"}
}

def calculate_rank(user_cards_count, total_cards):
    if total_cards == 0:
        return RANK_SYSTEM[0]
    percentage = (user_cards_count / total_cards) * 100
    for threshold in sorted(RANK_SYSTEM.keys(), reverse=True):
        if percentage >= threshold:
            return RANK_SYSTEM[threshold]
    return RANK_SYSTEM[0]

@router.message(Command("start"))
async def cmd_start(message: Message):
    session = get_session()
    user = session.query(User).filter_by(id=message.from_user.id).first()
    if not user:
        user = User(id=message.from_user.id, username=message.from_user.first_name or "–î—Ä—É–≥")
        session.add(user)
        session.commit()
    total_cards = session.query(Card).count()
    user_cards = session.query(UserCard).filter_by(user_id=user.id).distinct(Card.id).count()
    rank = calculate_rank(user_cards, total_cards)
    user.title = rank["title"]
    user.rank = rank["emoji"]
    user.rank_description = rank["description"]
    session.commit()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.rank} {user.username}!\n{rank['description']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def get_card(message: Message):
    session = get_session()
    user = session.query(User).filter_by(id=message.from_user.id).first()
    now = datetime.utcnow()
    
    if user.last_card_received and (now - user.last_card_received) < timedelta(hours=12):
        await message.answer("–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∑–∂–µ!")
        return
    
    cards = session.query(Card).all()
    if not cards:
        await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        return
    
    random_card = choice(cards)
    user_card = UserCard(user_id=user.id, card_id=random_card.id)
    user.points += random_card.points
    user.last_card_received = now
    
    total_cards = session.query(Card).count()
    user_cards = session.query(UserCard).filter_by(user_id=user.id).distinct(Card.id).count()
    rank = calculate_rank(user_cards, total_cards)
    user.title = rank["title"]
    user.rank = rank["emoji"]
    user.rank_description = rank["description"]
    
    session.add(user_card)
    session.commit()
    
    caption = (
        f"–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ ‚Äî <b>{random_card.name}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {random_card.description}\n"
        f"–û—á–∫–∏: {random_card.points}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {random_card.rarity}\n"
        f"–ü–æ–ª—É—á–∏ –∫–∞—Ä—Ç–æ—à–∫—É —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ —Å /bonus! ü•î"
    )
    await message.answer_photo(
        photo=random_card.image_url,
        caption=caption,
        parse_mode="HTML",
        reply_markup=main_menu()
    )

@router.message(F.text == "–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")
async def my_cards(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=cards_menu())
    await state.set_state(CardStates.SELECT_RARITY)

@router.callback_query(CardStates.SELECT_RARITY)
async def select_rarity(callback: CallbackQuery, state: FSMContext):
    rarity = callback.data
    session = get_session()
    if rarity == "favorite":
        user_cards = session.query(UserCard).filter_by(
            user_id=callback.from_user.id,
            is_favorite=True
        ).all()
    else:
        user_cards = session.query(UserCard).join(Card).filter(
            UserCard.user_id == callback.from_user.id,
            Card.rarity == rarity
        ).all()
    
    if not user_cards:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!")
        return
    
    cards = {uc.card.name: uc.card_id for uc in user_cards}
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É:", reply_markup=card_details(cards, rarity if rarity != "favorite" else "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ"))
    await state.set_state(CardStates.SELECT_CARD)
    await callback.answer()

@router.callback_query(CardStates.SELECT_CARD, F.data.startswith("card_"))
async def show_card(callback: CallbackQuery, state: FSMContext):
    card_id = int(callback.data.split("_")[1])
    session = get_session()
    
    user_card = session.query(UserCard).filter_by(
        user_id=callback.from_user.id,
        card_id=card_id
    ).first()
    
    if not user_card:
        await callback.message.answer("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!")
        return
    
    card = session.query(Card).get(card_id)
    caption = (
        f"<b>{card.name}</b>\n"
        f"{card.description}\n"
        f"–û—á–∫–∏: {card.points}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card.rarity}"
    )
    await callback.message.answer_photo(
        photo=card.image_url,
        caption=caption,
        parse_mode="HTML",
        reply_markup=card_details({"favorite": card_id}, card.rarity, user_card.is_favorite)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("favorite_"))
async def toggle_favorite(callback: CallbackQuery):
    card_id = int(callback.data.split("_")[1])
    session = get_session()
    user_card = session.query(UserCard).filter_by(
        user_id=callback.from_user.id,
        card_id=card_id
    ).first()
    
    if user_card:
        user_card.is_favorite = not user_card.is_favorite
        session.commit()
        await callback.message.answer("–°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await callback.answer()

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    session = get_session()
    user = session.query(User).filter_by(id=message.from_user.id).first()
    card_count = session.query(UserCard).filter_by(user_id=user.id).count()
    total_cards = session.query(Card).count()
    user_cards = session.query(UserCard).filter_by(user_id=user.id).distinct(Card.id).count()
    rank = calculate_rank(user_cards, total_cards)
    await message.answer(
        f"–ò–º—è: {user.username}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è
        f"–ö–∞—Ä—Ç–æ—á–µ–∫: {card_count} ({user_cards}/{total_cards})\n"
        f"–û—á–∫–∏: {user.points}\n"
        f"–†–∞–Ω–≥: {rank['emoji']} {rank['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {rank['description']}",
        reply_markup=main_menu()
    )

@router.message(F.text == "–¢–æ–ø")
async def top_players(message: Message):
    session = get_session()
    top_users = session.query(User).order_by(User.points.desc()).limit(10).all()
    text = "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, user in enumerate(top_users, 1):
        total_cards = session.query(Card).count()
        user_cards = session.query(UserCard).filter_by(user_id=user.id).distinct(Card.id).count()
        rank = calculate_rank(user_cards, total_cards)
        text += f"{i}. {user.username} {rank['emoji']} ‚Äî {user.points} –æ—á–∫–æ–≤\n"
    await message.answer(text, reply_markup=main_menu())